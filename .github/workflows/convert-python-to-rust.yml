name: Convert Python to Rust

on:
  workflow_dispatch:
    inputs:
      python_repo_url:
        description: 'Python GitHub repository URL to convert'
        required: true
        type: string

jobs:
  convert:
    runs-on: ubuntu-latest
    environment: py2rust
    
    steps:
    - name: Checkout converter repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Extract repository name
      id: extract_name
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        echo "project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
        echo "Converting: ${{ inputs.python_repo_url }}"
        echo "Project name: ${PROJECT_NAME}"

    - name: Create project structure and add submodule
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        mkdir -p "projects/${PROJECT_NAME}"
        cd "projects/${PROJECT_NAME}"
        
        # Add the Python repo as a submodule
        git submodule add "${{ inputs.python_repo_url }}" python
        
        # Clone for temporary processing
        git clone "${{ inputs.python_repo_url }}" "../../temp_python_repo"
    
    - name: Verify API key is configured
      run: |
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "❌ GEMINI_API_KEY secret is not configured"
          echo "Please add your Gemini API key to repository secrets:"
          echo "1. Go to Settings → Secrets and variables → Actions"
          echo "2. Click 'New repository secret'"
          echo "3. Name: GEMINI_API_KEY"
          echo "4. Value: Your Gemini API key from https://aistudio.google.com/"
          exit 1
        else
          echo "✅ GEMINI_API_KEY secret is configured"
        fi
    
    - name: Install Python dependencies
      run: |
        cd py2rust
        pip install -r requirements.txt
    
    - name: Convert Python to Rust
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      working-directory: py2rust
      run: |
        echo "Checking environment variables..."
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "❌ GEMINI_API_KEY is not set"
          exit 1
        else
          echo "✅ GEMINI_API_KEY is set (length: ${#GEMINI_API_KEY})"
        fi
        
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        python main.py "../temp_python_repo" \
          --output-dir "../projects/${PROJECT_NAME}/rust" \
          --verbose
    
    - name: Commit and push converted project
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Initialize and update submodules
        git submodule update --init --recursive
        
        git add projects/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
          git commit -m "Convert ${{ inputs.python_repo_url }} to Rust

          - Source: ${{ inputs.python_repo_url }} (submodule in ${PROJECT_NAME}/python)
          - Generated: ${PROJECT_NAME}/rust
          - Timestamp: $(date -u)"
          
          git push
        fi
    
    - name: Cleanup temporary files
      run: |
        rm -rf temp_python_repo
    
    - name: Create summary
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        echo "## Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: ${{ inputs.python_repo_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: projects/${PROJECT_NAME}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "projects/${PROJECT_NAME}/rust/Cargo.toml" ]; then
          echo "- **Status**: ✅ Rust project created" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Source**: \`projects/${PROJECT_NAME}/python/\` (git submodule)" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Project**: \`projects/${PROJECT_NAME}/rust/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Structure" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "projects/${PROJECT_NAME}/" >> $GITHUB_STEP_SUMMARY
          echo "├── python/     # Git submodule → ${{ inputs.python_repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "└── rust/       # Generated Rust project" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ❌ Conversion failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "py2rust/conversion.log" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Conversion Log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 py2rust/conversion.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
