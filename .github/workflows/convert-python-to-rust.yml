name: Convert Python to Rust

on:
  workflow_dispatch:
    inputs:
      python_repo_url:
        description: 'Python GitHub repository URL to convert'
        required: true
        type: string

jobs:
  convert:
    runs-on: ubuntu-latest
    environment: py2rust
    
    steps:
    - name: Checkout converter repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Extract repository name
      id: extract_name
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        echo "project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
        echo "Converting: ${{ inputs.python_repo_url }}"
        echo "Project name: ${PROJECT_NAME}"

    - name: Create project structure and clone repository
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        mkdir -p "projects/${PROJECT_NAME}"
        
        # Clone Python repo into project directory for processing
        git clone "${{ inputs.python_repo_url }}" "projects/${PROJECT_NAME}/python"
        
        # Also clone for temporary processing (main.py expects this path)
        git clone "${{ inputs.python_repo_url }}" "temp_python_repo"
    
    - name: Verify API key is configured
      run: |
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚ùå GEMINI_API_KEY secret is not configured"
          echo "Please add your Gemini API key to repository secrets:"
          echo "1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions"
          echo "2. Click 'New repository secret'"
          echo "3. Name: GEMINI_API_KEY"
          echo "4. Value: Your Gemini API key from https://aistudio.google.com/"
          exit 1
        else
          echo "‚úÖ GEMINI_API_KEY secret is configured"
        fi
    
    - name: Install Python dependencies
      run: |
        cd py2rust
        pip install -r requirements.txt
    
    - name: Convert Python to Rust
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      working-directory: py2rust
      run: |
        echo "Checking environment variables..."
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "‚ùå GEMINI_API_KEY is not set"
          exit 1
        else
          echo "‚úÖ GEMINI_API_KEY is set (length: ${#GEMINI_API_KEY})"
        fi
        
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        python main.py "../temp_python_repo" \
          --output-dir "../projects/${PROJECT_NAME}" \
          --verbose
    
    - name: Replace clone with submodule after successful compilation
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        
        # Check if Rust compilation was successful
        if [ -f "projects/${PROJECT_NAME}/Cargo.toml" ]; then
          echo "‚úÖ Rust compilation successful, replacing clone with submodule..."
          
          # Remove the cloned directory
          rm -rf "projects/${PROJECT_NAME}/python"
          
          # Add as proper git submodule
          cd "projects/${PROJECT_NAME}"
          git submodule add "${{ inputs.python_repo_url }}" python
          cd ../..
        else
          echo "‚ùå Rust compilation failed, keeping clone for debugging"
        fi
    
    - name: Create Pull Request
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        BRANCH_NAME="convert-${PROJECT_NAME}-$(date +%Y%m%d-%H%M%S)"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Initialize and update submodules (if any exist)
        if [ -f .gitmodules ]; then
          git submodule update --init --recursive
        fi
        
        # Create and switch to new branch
        git checkout -b "$BRANCH_NAME"
        
        git add projects/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Commit changes
        git commit -m "Convert ${{ inputs.python_repo_url }} to Rust

        - Source: ${{ inputs.python_repo_url }} (submodule in ${PROJECT_NAME}/python)
        - Generated Rust project: ${PROJECT_NAME}/
        - Timestamp: $(date -u)
        
        ## Project Structure
        \`\`\`
        projects/${PROJECT_NAME}/
        ‚îú‚îÄ‚îÄ python/       # Git submodule ‚Üí ${{ inputs.python_repo_url }}
        ‚îú‚îÄ‚îÄ src/          # Rust source code
        ‚îú‚îÄ‚îÄ Cargo.toml    # Rust project manifest
        ‚îî‚îÄ‚îÄ target/       # Compiled artifacts
        \`\`\`"
        
        # Push branch
        git push origin "$BRANCH_NAME"
        
        # Create Pull Request using GitHub CLI
        gh pr create \
          --title "ü¶Ä Convert ${PROJECT_NAME} from Python to Rust" \
          --body "**Automated Python-to-Rust conversion using Gemini 2.5 Pro**

        ## Summary
        - **Source Repository**: ${{ inputs.python_repo_url }}
        - **Project**: \`projects/${PROJECT_NAME}/\`
        - **Generated**: $(date -u)

        ## Structure
        \`\`\`
        projects/${PROJECT_NAME}/
        ‚îú‚îÄ‚îÄ python/       # Git submodule ‚Üí ${{ inputs.python_repo_url }}
        ‚îú‚îÄ‚îÄ src/          # Generated Rust source code
        ‚îú‚îÄ‚îÄ Cargo.toml    # Rust project configuration
        ‚îî‚îÄ‚îÄ target/       # Compiled artifacts (if successful)
        \`\`\`

        ## Features
        - ‚úÖ Complete Rust project with proper Cargo.toml
        - ‚úÖ Idiomatic Rust code using ownership system
        - ‚úÖ Error handling with Result<T, E>
        - ‚úÖ Compiled and tested automatically
        - ‚úÖ Formatted with \`cargo fmt\`
        - ‚úÖ Linted with \`cargo clippy\`

        **Generated by**: [Python to Rust Converter](https://github.com/${{ github.repository }})
        **Powered by**: Google Gemini 2.5 Pro" \
          --head "$BRANCH_NAME" \
          --base main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup temporary files
      run: |
        rm -rf temp_python_repo
    
    - name: Create summary
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        echo "## Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: ${{ inputs.python_repo_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: projects/${PROJECT_NAME}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "projects/${PROJECT_NAME}/Cargo.toml" ]; then
          echo "- **Status**: ‚úÖ Rust project created" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Source**: \`projects/${PROJECT_NAME}/python/\` (git submodule)" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Project**: \`projects/${PROJECT_NAME}/\` (direct)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Structure" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "projects/${PROJECT_NAME}/" >> $GITHUB_STEP_SUMMARY
          echo "‚îú‚îÄ‚îÄ python/       # Git submodule ‚Üí ${{ inputs.python_repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "‚îú‚îÄ‚îÄ src/          # Generated Rust source code" >> $GITHUB_STEP_SUMMARY
          echo "‚îú‚îÄ‚îÄ Cargo.toml    # Rust project manifest" >> $GITHUB_STEP_SUMMARY
          echo "‚îî‚îÄ‚îÄ target/       # Compiled artifacts" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ‚ùå Conversion failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "py2rust/conversion.log" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Conversion Log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 py2rust/conversion.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
