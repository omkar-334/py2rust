name: Convert Python to Rust

on:
  workflow_dispatch:
    inputs:
      python_repo_url:
        description: 'Python GitHub repository URL to convert'
        required: true
        type: string

jobs:
  convert:
    runs-on: ubuntu-latest
    environment: py2rust
    
    steps:
    - name: Checkout converter repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Extract repository name
      id: extract_name
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        echo "project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
        echo "Converting: ${{ inputs.python_repo_url }}"
        echo "Project name: ${PROJECT_NAME}"

    - name: Create project structure and clone repository
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        mkdir -p "projects/${PROJECT_NAME}"
        
        # Clone Python repo into project directory for processing
        git clone "${{ inputs.python_repo_url }}" "projects/${PROJECT_NAME}/python"
        
        # Also clone for temporary processing (main.py expects this path)
        git clone "${{ inputs.python_repo_url }}" "temp_python_repo"
    
    - name: Verify API key is configured
      run: |
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "❌ GEMINI_API_KEY secret is not configured"
          echo "Please add your Gemini API key to repository secrets:"
          echo "1. Go to Settings → Secrets and variables → Actions"
          echo "2. Click 'New repository secret'"
          echo "3. Name: GEMINI_API_KEY"
          echo "4. Value: Your Gemini API key from https://aistudio.google.com/"
          exit 1
        else
          echo "✅ GEMINI_API_KEY secret is configured"
        fi
    
    - name: Install Python dependencies
      run: |
        cd py2rust
        pip install -r requirements.txt
    
    - name: Convert Python to Rust
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      working-directory: py2rust
      run: |
        echo "Checking environment variables..."
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "❌ GEMINI_API_KEY is not set"
          exit 1
        else
          echo "✅ GEMINI_API_KEY is set (length: ${#GEMINI_API_KEY})"
        fi
        
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        python main.py "../temp_python_repo" \
          --output-dir "../projects/${PROJECT_NAME}" \
          --verbose
    

    
    - name: Clean up build artifacts and add gitignore
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        
        # Create .gitignore in the project directory to exclude target/
        cat > "projects/${PROJECT_NAME}/.gitignore" << 'EOF'
        # Rust build artifacts
        /target/
        
        # Cargo lock file (optional, depending on project type)
        # Cargo.lock
        
        # IDE files
        .vscode/
        .idea/
        *.swp
        *.swo
        
        # OS files
        .DS_Store
        Thumbs.db
        EOF
        
        # Remove target directory (build artifacts)
        rm -rf "projects/${PROJECT_NAME}/target"
        
        echo "✅ Cleaned up build artifacts and added .gitignore"
    
    - name: Check build status and create submodule
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        PROJECT_DIR="projects/${PROJECT_NAME}"
        
        # Test final compilation status
        echo "🔍 Checking final build status..."
        cd "$PROJECT_DIR"
        
        BUILD_STATUS="❌ FAILED"
        BUILD_DETAILS=""
        
        if cargo check --quiet 2>build_errors.log; then
          if cargo build --quiet 2>>build_errors.log; then
            if cargo test --quiet 2>>build_errors.log; then
              BUILD_STATUS="✅ SUCCESS"
              BUILD_DETAILS="- ✅ Syntax check: PASSED\n- ✅ Compilation: SUCCESSFUL\n- ✅ Tests: PASSED"
            else
              BUILD_STATUS="⚠️ PARTIAL"
              BUILD_DETAILS="- ✅ Syntax check: PASSED\n- ✅ Compilation: SUCCESSFUL\n- ❌ Tests: FAILED"
            fi
          else
            BUILD_STATUS="❌ FAILED"
            BUILD_DETAILS="- ✅ Syntax check: PASSED\n- ❌ Compilation: FAILED"
          fi
        else
          BUILD_STATUS="❌ FAILED"
          BUILD_DETAILS="- ❌ Syntax check: FAILED"
        fi
        
        # Save build status for PR
        echo "BUILD_STATUS=$BUILD_STATUS" >> $GITHUB_ENV
        echo "BUILD_DETAILS<<EOF" >> $GITHUB_ENV
        echo -e "$BUILD_DETAILS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Save build errors if any
        if [ -s build_errors.log ]; then
          echo "BUILD_ERRORS<<EOF" >> $GITHUB_ENV
          cat build_errors.log >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        cd ../..
        
        # Handle submodule based on build status
        if [[ "$BUILD_STATUS" == "✅ SUCCESS" || "$BUILD_STATUS" == "⚠️ PARTIAL" ]]; then
          echo "✅ Build successful/partial, replacing clone with submodule..."
          
          # Remove the cloned directory
          rm -rf "$PROJECT_DIR/python"
          
          # Add as proper git submodule
          cd "$PROJECT_DIR"
          git submodule add "${{ inputs.python_repo_url }}" python
          cd ../..
        else
          echo "❌ Build failed, keeping clone for debugging"
        fi
    
    - name: Create Pull Request
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        BRANCH_NAME="convert-${PROJECT_NAME}-$(date +%Y%m%d-%H%M%S)"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Initialize and update submodules (if any exist)
        if [ -f .gitmodules ]; then
          git submodule update --init --recursive
        fi
        
        # Create and switch to new branch
        git checkout -b "$BRANCH_NAME"
        
        git add projects/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Commit changes
        git commit -m "Convert ${{ inputs.python_repo_url }} to Rust

        - Source: ${{ inputs.python_repo_url }} (submodule in ${PROJECT_NAME}/python)
        - Generated Rust project: ${PROJECT_NAME}/
        - Timestamp: $(date -u)
        
        ## Project Structure
        \`\`\`
        projects/${PROJECT_NAME}/
        ├── python/       # Git submodule → ${{ inputs.python_repo_url }}
        ├── src/          # Rust source code
        ├── Cargo.toml    # Rust project manifest
        └── target/       # Compiled artifacts
        \`\`\`"
        
        # Push branch
        git push origin "$BRANCH_NAME"
        
        # Create PR body file to avoid shell escaping issues
        cat > pr_body.md << EOF
**Automated Python-to-Rust conversion using Gemini 2.5 Pro**

## Build Status: ${BUILD_STATUS}

${BUILD_DETAILS}

## Summary
- **Source**: ${{ inputs.python_repo_url }}
- **Target**: projects/${PROJECT_NAME}/
- **Generated**: $(date -u)

**Powered by**: Google Gemini 2.5 Pro
EOF

        # Add build errors if any exist
        if [ -n "${BUILD_ERRORS:-}" ]; then
          echo "" >> pr_body.md
          echo "## Build Errors" >> pr_body.md
          echo '```' >> pr_body.md
          echo "${BUILD_ERRORS}" >> pr_body.md
          echo '```' >> pr_body.md
          echo "" >> pr_body.md
          echo "💡 **Next Steps**: Review and fix the compilation errors above." >> pr_body.md
        fi

        # Create Pull Request using GitHub CLI
        gh pr create \
          --title "🦀 Convert ${PROJECT_NAME} from Python to Rust ${BUILD_STATUS}" \
          --body-file pr_body.md \
          --head "$BRANCH_NAME" \
          --base main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup temporary files
      run: |
        rm -rf temp_python_repo
    
    - name: Create summary
      run: |
        PROJECT_NAME=$(basename "${{ inputs.python_repo_url }}" .git)
        echo "## Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: ${{ inputs.python_repo_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: projects/${PROJECT_NAME}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "projects/${PROJECT_NAME}/Cargo.toml" ]; then
          echo "- **Status**: ✅ Rust project created" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ${BUILD_STATUS}" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Source**: \`projects/${PROJECT_NAME}/python/\` (git submodule)" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Project**: \`projects/${PROJECT_NAME}/\` (direct)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Project Structure" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "projects/${PROJECT_NAME}/" >> $GITHUB_STEP_SUMMARY
          echo "├── python/       # Git submodule → ${{ inputs.python_repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "├── src/          # Generated Rust source code" >> $GITHUB_STEP_SUMMARY
          echo "├── Cargo.toml    # Rust project manifest" >> $GITHUB_STEP_SUMMARY
          echo "├── .gitignore    # Excludes target/ build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "└── target/       # Build artifacts (excluded from git)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ❌ Conversion failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "py2rust/conversion.log" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Conversion Log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 py2rust/conversion.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
